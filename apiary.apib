FORMAT: 1A
HOST: https://questionerv1.herokuapp.com/api/v1

# Questioner

Questioner is a question crowdsourcing tool that provides support for meetup organizers, with features that help them prioritize questions asked by potential attendees.

# Group Auth
## Sign Up  [/auth/signup]

### Sign Up as a new User [POST]
You can sign up using this action

+ Request (application/json)

        {
            "firstname": "arya",
            "lastname": "stark",
            "email": "aryastark@gmail.com",
            "password": "arya1234"
        }
        
+ Response 201 (application/json)

        {
           "status": 201,
           "data": [
                {
                    "token": "abcdefghi.abckedfhgiklmnopqrstuvwxyz.abcdefghi",
                    "user": {
                            "id": 1,
                            "firstname": "arya",
                            "lastname": "stark",
                            "email": "aryastark@gmail.com",
                            "username": "arya",
                            "othername": "myname",
                            "isAdmin": false,
                            "createdOn": "1/1/2019",
                            "registered": true,
                            "phoneNumber": "803-333-3333"
                        }
                }
                            
        }


+ Response 409 (application/json)

        {
            "status": 409,
            "error": "The email you provided is already used by another user"
        }

## Login [/auth/login]

### Login as an existing user [POST]
You can login using this action

+ Request (application/json)

        {
            "email": "aryastark@gmail.com",
            "password": "arya1234"
        }
        
+ Response 201 (application/json)

        {
            "status": 201,
            "data": [
                {
                    "token": "abcdefghi.abckedfhgiklmnopqrstuvwxyz.abcdefghi",
                    "user": {
                            "id": 1,
                            "firstname": "arya",
                            "lastname": "stark",
                            "email": "aryastark@gmail.com",
                            "username": "arya",
                            "othername": "myname",
                            "isAdmin": false,
                            "createdOn": "1/1/2019",
                            "registered": true,
                            "phoneNumber": "803-333-3333"
                        }
                }
        }            

+ Response 401 (application/json)

        {
            "status": 401,
            "error": "You entered an incorrect password, please check and try again"         
        }


+ Response 401 (application/json)

        {
            "status": 401,
            "error": "The email you entered does not belong to any account"
        }


# Group Users

## Users [/users]

### List all Users [GET]
Admins can view a list of users using this action

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "firstname": "Arya",
                    "lastname": "Stark",
                    "othername": ""
                    "email": "aryastark@gmail.com",
                    "username": "aryastark1",
                    "registered": "1/1/2019",
                    "isAdmin": false,
                    "phoneNumber": "(803)-5555-3333",
                    "bio": "Winter is coming",
                    "birthday": "1/1/2000",
                    "avatar": "profile.jpeg"
                },

                {
                    "id": 2,
                    "firstname": "Tyrion",
                    "lastname": "Lannister",
                    "othername": ""
                    "email": "tyrionlannister@gmail.com",
                    "username": "tyrion443",
                    "registered": "1/1/2019",
                    "isAdmin": false,
                    "phoneNumber": "(803)-5555-4444",
                    "bio": "Born in casterly rock",
                    "birthday": "1/1/1988",
                    "avatar": "profile.jpeg"
                }
            ]
        }


+ Response 404 (application/json)

        {
            "status": 404,
            "error": "No registered users at the moment"
        }


## User [/users/{user_id}]
+ Parameters
    + user_id (number, required) - ID of the User in the form of an integer

### Fetch a Single User [GET]
Admins can use retrieve details of a particular user using this actionS

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "firstname": "Arya",
                    "lastname": "Stark",
                    "othername": ""
                    "email": "aryastark@gmail.com",
                    "username": "aryastark1",
                    "registered": "1/1/2019",
                    "isAdmin": false,
                    "phoneNumber": "(803)-5555-3333",
                    "bio": "Winter is coming",
                    "birthday": "1/1/2000",
                    "avatar": "profile.jpeg"
                }
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "This user does not exist at the moment"
        }

### Update User Data [PATCH]

+ Request (application/json)

        {
            "username": "winterfell",
            "bio": "born in winterfell"
        }


+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "firstname": "Arya",
                    "lastname": "Stark",
                    "othername": ""
                    "email": "aryastark@gmail.com",
                    "username": "winterfell",
                    "registered": "1/1/2019",
                    "isAdmin": false,
                    "phoneNumber": "(803)-5555-3333",
                    "bio": "born in winterfell",
                    "birthday": "1/1/2000",
                    "avatar": "profile.jpeg"
                }
            ]
        }


+ Response 422 (application/json)

        {
            "status": 422,
            "error": "You can only update your own personal data"
        }


+ Response 409 (application/json)

        {
            "status": 409,
            "error": "The username you provided is already used by another user"
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "This user does not have an account"
        }
### Delete a User [DELETE]
Admins and Users can use delete user accounts using this action

+ Response 200 (application/json)

        {
            "status": 200,
            "data": ["User account has been deactivated successfully"]
        }

+ Response 422 (application/json)

        {
            "status": 422,
            "error": "You can only deactivate your own account"
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "A use with this accoutn does not exist"
        }


# Group Meetups

## Meetups [/meetups]

### List All Meetups [GET]

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "title": "meetup 1",
                    "location": "meetup location 1",
                    "happeningOn": "2/3/2019",
                    "tags": ["tag1", "tag2", "tag3"]
                }, 
                {
                    
                    "id": 2
                    "title": "meetup 2",
                    "location": "meetup location 2",
                    "happeningOn": "2/3/2019",
                    "tags": ["tag1", "tag2", "tag3"]
                }, 
                {
                    
                    "id": 3,
                    "title": "meetup 3",
                    "location": "meetup location 2",
                    "happeningOn": "2/3/2019",
                    "tags": ["tag1", "tag2", "tag3"]
                }, 
            ]
        }

### Create a New Meetup [POST]

You can create a meetup using this action. It takes a JSON
object containing a meetup.

+ Request (application/json)

        {
            "topic": "meetup topic",
            "location": "meetup location",
            "happeningOn": "1/2/2020",
            "tags": ["tag1","tag2","tag3"],
            "description": "sample description"
        }

+ Response 201 (application/json)

        {
            "status": 201,
            "data": [
                {
                    "topic": "meetup topic",
                    "location": "meetup location",
                    "happenignOn": "1/2/2020",
                    "tags": ["tag1", "tag2", "tag3"],
                    "description": "sample description"
                }
            ]
        }

+ Response 409 (application/json)

        {
            "status": 409,
            "error": "A meetup is scheduled on the same day at the same location"
        }

+ Response 422 (application/json)

        {
            "status": 422,
            "error": "You cannot add more than 5 tags to this meetup"
        }

## Meetup [/meetups/{meetup_id}]

+ Parameters
    + meetup_id (number, required) - ID of the Meetup in the form of an integer

### Fetch a Single Meetup [GET]
+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "topic": "meetup 1",
                    "location": "meetup location 1",
                    "happeningOn": "2/3/2019",
                    "tags": ['tag1', 'tag2', 'tag3']
                }, 
                
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "The requested meetup does not exist"
        }

### Delete a Single Meetup [DELETE]
Admins can delete a meetup using this action

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [ "Meetup with id: 1 has been deleted successfully" ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "The meetup cannot be deleted because it doesn\'t exist."
        }

## Upcoming Meetups [/meetups/upcoming]

### List Upcoming Meetups [GET]
+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "topic": "meetup 1",
                    "location": "meetup location 1",
                    "happeningOn": "2/3/2019",
                    "tags": ["tag1", "tag2", "tag3"]
                }, 
                
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "There are no upcoming meetups at the moment"
        }

## Meetup Images [/meetups/{meetup_id}/images]

+ Parameters
    + meetup_id (number, required) - ID of the Meetup in the form of an integer

### Add Meetup Images [POST]
You can add images to meetups using this action

+ Request (application/json)

        {
          "images": ["sample1.jpg", "sample2.jpg"]
        }
        
+ Response 201 (application/json)

        {
            "status": 201,
            "data": [
                {
                   "meetup": 1,
                   "topic": "meetup topic",
                   "images": ["sample1.jpg", "sample2.jpg"]
                }
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "You cannot add images to this meetup, because the meetup does not exist"
        }

### Fetch all Meetup Images [GET]

+ Response 200 (application/json)

        {
            "status": "200",
            "data": [
                {
                    "id": 1,
                    "imageUrl": "sample.jpg",
                    "meetup": 1
                }
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "There are no images for this meetup at the moment"
        }


+ Response 404 (application/json)

        {
            "status": 404,
            "error": "This meetup does not exist"
        }
    


## Meetup Image [/meetups/{meetup_id}/images/{image_id}]
+ Parameters
    + meetup_id (number, required) - ID of the Meetup in the form of an integer
    + image_id (number, required) - ID of the Image in the form of an integer

### Fetch a Single Meetup Image [GET]
+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "imageUrl": "sample.jpg",
                    "meetup": 1
                }
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "The meetup image does not exist"
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "The requested meetup does not exist"
        }


## Meetup Tags [/meetups/{meetup_id}/tags]

+ Parameters
    + meetup_id (number) - ID Of the Meetup in the form of an integer

### Add Meetups Tags [POST]
You can add tags to meetups using this action

+ Request (application/json)

        {
          "tags": ["tag1", "tag2", "tag3"]
        }
        
+ Response 201 (application/json)

        {
            "status": 201,
            "data": [
                {
                   "meetup": 1,
                   "topic": "meetup topic",
                   "tags": ["tag1", "tag2", "tag3"]
                }
            ]
        }

+ Response 422 (application/json)

        {
            "status": 422,
            "error": "You cannot add more than 5 tags to this meetup"
        }

+ Response 422 (application/json)

        {
            "status": 422,
            "error": "You cannot add tags to this meetup, because the meetup does not exist"
        }

### Fetch All Meetup Tags [GET]

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                   "meetup": 1,
                   "topic": "meetup topic",
                   "tags": ["tag1", "tag2", "tag3"]
                },

                {
                   "meetup": 1,
                   "topic": "meetup topic",
                   "tags": ["tag4", "tag5"]
                }
            ]
        }
# Group Questions

## Questions [/questions]

### List all Questions [GET]

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "title": "my new question  title 1",
                    "body": "new question body new",
                    "createdBy": 1,
                    "meetup": 1,
                    "votes": 0,
                    "createdOn": "2/1/2019"
                },
                
                {
                    "id": 2,
                    "title": "my new question  title 2",
                    "body": "new question body new",
                    "createdBy": 1,
                    "meetup": 1,
                    "votes": 0,
                    "createdOn": "2/1/2019"
                },
                
                {
                    "id": 3,
                    "title": "my new question  title 3",
                    "body": "new question body new",
                    "createdBy": 1,
                    "meetup": 1,
                    "votes": 0,
                    "createdOn": "2/1/2019"
                }
            ]
        }
        
### Create a New Question [POST]
User can create a meetup question using this action

+ Request (application/json) 

        {
           "meetupId": 1,
           "title": "question sample title",
           "body": "question sample body"
        }
        
+ Response 201 (application/json)

        {
          "status": 201,
          "data": [
                {
                  "user": 1,
                  "title": "question sample title",
                  "body": "question sample body",
                  "meetup": 1
                }
            ]
        }
        
+ Response 404 (application/json)

        {
            "status": 404,
            "error": "The meetup with id: 1 does not exist"
        }

## Question Upvote [/questions/{question_id}/upvote]

### Upvote a Question [PATCH]
+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                  {
                    "meetup": 1,
                    "title": "question title",
                    "body": "question body",
                    "votes": 1
                  }
            ]
        }

## Question Downvote [/questons/{question_id}/upvote]

### Downvote a Question [PATCH]

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                  {
                    "meetup": 1,
                    "title": "question title",
                    "body": "question body",
                    "votes": 0
                  }
            ]
        }
        
## Meetup Questions [/meetups/{meetup_id}/questions]

+ Parameters
    + meetup_id (number, required) - ID Of the Meetup in the form of an integer


### List all Meetups Questions [GET]

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "createdBy": 1,
                    "meetup": 1,
                    "title": "sample title 1",
                    "body": "sample body 1"
                },
                
                {
                    "id": 2,
                    "createdBy": 1,
                    "meetup": 1,
                    "title": "sample title 2",
                    "body": "sample body 2"
                }
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "There are no questions for this meetup at the moment"
        }

## Meetup Question [/meetups/{meetup_id}/questions/{question_id}]

+ Parameters
    + meetup_id (number) - ID Of the Meetup in the form of an integer
    + question_id (number) - ID of the question in the form of an integer

### List a Meetup question [GET]

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "createdBy": 1,
                    "meetup": 1,
                    "title": "sample question title",
                    "body": "sample question body"
                
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "The requested question does not exist"
        }

### Update a Meetup Question [PATCH]

+ Request (application/json)

        {
            "title": "my new title",
            "body": "my new body"
        }
        

+ Response 200 (application/json)

        {
            "status": 201,
            "data": [
                {
                    "title": "my new title",
                    "body": "my new body",
                    "user": 1,
                    "meetup": 1
                }
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "The requested question does not exist"
        }
        
### DELETE a Meetup Question [DELETE]
        

+ Response 200 (application/json)

        {
            "status": 201,
            "data": [
                "Question with id: 1 has been deleted successfully"
            ]
        }

+ Response 404 (application/json)

        {
            "status": 404,
            "error": "The requested question cannot be deleted because it doesn't exist"
        }
        
# Group Comments

## Comments [/comments/]

### Create a Comment [POST]

+ Request (application/json)

        {
            "commentText": "my comment",
            "questionId": 1
        }

+ Response 201 (application/json)

        {
            "status": 200,
            "data": [
                  {
                    "question": 1,
                    "title": "question title",
                    "body": "question body",
                    "comment": "my comment"
                  }
            ]
        }
        
# Group Rsvps

## Rsvps [/meetups/{meetup_id}/rsvps]

+ Parameters
    + meetup_id (number) - ID Of the Meetup in the form of an integer

### List all RSVPs [GET]

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "user": 1,
                    "meetup": 2,
                    "response": "maybe"
                },
        
                {
                    "id": 2,
                    "user": 1,
                    "meetup": 2,
                    "response": "yes"
                }
            ]
        }

### Make a RSVP [POST]

+ Request (application/json)

         {
            "userId": 1
            "response": "yes"
        }
        

+ Response 201 (application/json)

        {
            "meetup": 1,
            "topic": "about x",
            "status": "yes"
        }


## Rsvp [/meetups/{meetup_id}/rsvps/{rsvp_id}]
+ Parameters
    + meetup_id (number) - ID Of the Meetup in the form of an integer
    + rsvp_id(number) - ID of the Rsvp in the form of an integer

### Get a RSVP [GET]

+ Response 200 (application/json)

        {
            "status": 200,
            "data": [
                {
                    "id": 1,
                    "user": 1,
                    "meetup": 2,
                    "response": "maybe"
                }
            ]
        }
